In the final part, we will complete our application by building out all the React components and using Stripe Checkout to accept payments.

AppNavbar

The Navbar will contain the Login Modal, Register modal, Logout button, and links to various pages on our website.

We will use Reactstrap components to build our Navbar component.

Then import the LoginModal, Logout and RegisterModal from the auth folder.

Import the PropTypes and connect function.
Define a state to assess whether the Navbar is open or not.

We have a toggle to change the open to close and vice versa. Get the user and isAuthenticated states from the auth props.
Then check whether we are authenticated or not; if we are, then we display the username, link to home, cart and orders, and also a Logout button.
If we are not authenticated, we get the Register and Login modals.
Display a Navbar brand, andwhen we are authenticated, we display the authLinks, and when we are not, we display the guestLinks.

Finally, define the mapStateToProps and add the auth.

Then connect it to the AppNavbar class.


This is the homepage of our application, where we display all our items and give the user an option to add items to the cart.

Bring in the getItems and addToCart functions from the actions folder, we use to fetch the items and add an item to the cart.

On mount, we fetch all the items using the getItems function.

We also define an onAddToCart function that triggers when we click Add to Cart button in any products.
It receives the userId and productId and has the addToCart function where it sends these values as parameters and keeps the number of items added to 1.
We could give users the option to choose the number of items, but we have not implemented it here to keep things simple.
Use a grid-based layout to display all our items, with all items displayed as Cards.

Use the map functionality to map over items and display the data for each in its own card.
We also have an add to cart button for each product.
Add to Cart button is only displayed when the user is authenticated.
We also have a mapStateToProps defined which has items, user, and isAuthenticated defined. Finally, we use the connect function to bind the actions and the mapStateToProps with the Home Component.


Home

This is the homepage of our application, where we display all our items and give the user an option to add items to the cart.

Bring in the getItems and addToCart functions from the actions folder, we use to fetch the items and add an item to the cart.

On mount, we fetch all the items using the getItems function.

We also define an onAddToCart function that triggers when we click Add to Cart button in any products.
It receives the userId and productId and has the addToCart function where it sends these values as parameters and keeps the number of items added to 1.
We could give users the option to choose the number of items, but we have not implemented it here to keep things simple.
Use a grid-based layout to display all our items, with all items displayed as Cards.

Use the map functionality to map over items and display the data for each in its own card.
We also have an add to cart button for each product.
Add to Cart button is only displayed when the user is authenticated.
We also have a mapStateToProps defined which has items, user, and isAuthenticated defined. Finally, we use the connect function to bind the actions and the mapStateToProps with the Home Component.

AddItem

This component is used to add items to the store.

We do not link this page to the Navbar since we don’t want users to add new items to our store.
We must make a separate seller portal with different access security measures set.

Since this is a beginner’s tutorial, we won’t take it that far, and only build this component to allow anyone to access.
We won’t add it in Navbar (only accessible through the URL).
We have a state with title, description, category, and price, which all relate to the product.

We have a similar onChange function and onSubmit function, like in the Register or Login components, but with different variables and different functions (addItem).

We have a form with all these fields and a button to add the item to the cart.

We display an alert on addition.
Lastl; we have a mapStateToProps, and a connect function to link it with the AddItem component.



Checkout

This is a helper function we create to handle the payment via Stripe Checkout.

First import the StripeCheckout function from react-stripe-checkout.
Add our Stripe publishable key and then create two functions; onToken to just checkout with the user and the token id, and Checkout function, which takes in the amount, user, and checkout from the Cart component, which we will define in a second.
Here, checkout is a function we receive through props from the Cart component.

This is the action which we use to checkout.
Use StripeCheckout with the amount in the lowest currency value, the token, currency, and the stripe key.


This component displays the user’s cart.

It shows all the items a user has in his/her cart, gives the option to remove them from the cart, and gives the option to checkout (pay for the products and order them).
We do not have a good way of handling what happens after the Checkout is finished and payment is done in this part.

Ideally, we should then redirect to the Orders page which can be done by history and withRouter```.
We have left it out for you to decide what’s best to do in case payment fails or in case payment is successful.
We have two functions; getCartItems and onDeleteFromcart defined, which both have functions to get all the cart items and delete an item from the cart.

We only get the items from the cart once we have the user loaded.

Otherwise, we would fetch an error.
Then we display all the items in our cart by mapping them and showing a delete button to delete that item from the cart.
After displaying all the items, we then have a Card displaying the bill and the Checkout component we defined earlier.

We then define the mapStateToProps and then connect it with this component.



Order

This is the page that displays all the orders users have placed.

Use the function getOrders from the actions file to do the same.
Once we are authenticated and have a user, get all the user orders and display them all in a card-based view using the map function.

Next, we define our mapStateToProps, and then we connect the functions and mapStateToProps with the Orders component.

Main

This is the component where we use the React router to define various routes for each component.

It helps us to have a multi-route layout with different components having their own route.
Use the withRouter, Switch, Route, and Redirect to do all this routing.

Wrap the main component with the withRouter function.